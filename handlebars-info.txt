This document is a brief introduction to the handlebars templating engine. (Examples files are all in the project already and can be examined while reading this text file. This file is attempting to clarify things about the handlebars template engine, if you have used another frontend framework for template files before it should be fairly similar.)

Q: What exactly is handlebars?
A: Handlebars is a frontend framework for writing template files. A template file essentially boils down to a reusable blob of html, css, and javascript. It could be as large as a whole landing page, or as small as a single navigation bar. 

Q: How does one use handlebars?
A: Skipping the set up process for now, you can see an example of a handlebars file by opening the views directory and opening contact.handlebars. In this file you will see a lot of pretty straight forward html, and some odd looking lines like this, "{{#if badUser.firstName}}". These odd looking pieces of code actually represent objects passed into the view by the express server code. So essentially those blurbs of code are just javascript! Lets break down one of those lines real quick so we can take a look at exactly what we are passing to the view. If you open another file in the project under routes/contact/contact.js you will see the file responsible for all the requests that interact with the contact view. Too keep things simple I am going to skip over most of the express code that is a topic in and of itself, I am going to keep this rather brief. Look at the line that says "res.render('contact', {badUser: badUser, errorMessage: req.flash('errorMessage')})". Looking at this line, res.render is a method to render a view called 'contact', and we are passing it an object with 2 keys: badUser and errorMessage. The object key badUser is just a javascript object with some keys and values, same for errorMessage. When this object gets passed to the 'contact' view, the handlebars view looks for objects passed in under the key badUser. When it finds the badUser object we look for properties on it to display some dynamic information. This is what makes libraries and frameworks like handlebars so useful, you can use a simple and short syntax to pass in dynamic information and shorten how much code you have to write by creating a reusable template! You may have noticed another line before the ones I directed your attention to, it looks like this, "{{> home/form-messages}}". This line is actually calling out to another template file under views/partials/home. A partial is a smaller block of html that is more like a piece instead of the whole. In this example we are including a small block of code intended to display messages set by the server for the user to see. 

Q: What does the handlebars set up process look like?
A: You can look at the app.js file at the root of the project to see the entire set up so far. The only step that is hidden from here is the installation part (npm install express-handlebars). First thing to do is require (include) the module into the project, that line looks like "const exphbs = require('express-handlebars')". Next we register handlebars as a template engine for express (app). That looks like "app.engine('handlebars', exphbs())". The first part of that is registering a file extension, in this case 'handebars', the second half is a callback method provided by the express-handlebars module itself. The next step is to register the file extension in a global registry area. This looks like "app.set('view engine', 'handlebars')". In this line we are setting a key called view engine with a value of handlebars, and this key value pair is accessible throughout the entire express application.



(p.s. Please let me know if this file is helpful or if it needs more clarification)

- Tim Ferris
